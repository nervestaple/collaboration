datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Collaboration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  messages Message[]
  members  UserCollaboration[]
  invites  UserCollaborationInvite[]
}

model UserCollaboration {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  userId          String
  collaboration   Collaboration @relation(fields: [collaborationId], references: [id])
  collaborationId Int

  @@id([userId, collaborationId])
}

model UserCollaborationInvite {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  userId          String
  collaboration   Collaboration @relation(fields: [collaborationId], references: [id])
  collaborationId Int

  @@id([userId, collaborationId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  collaboration   Collaboration @relation(fields: [collaborationId], references: [id])
  collaborationId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  collaborations UserCollaboration[]
  invites        UserCollaborationInvite[]
  messages       Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
